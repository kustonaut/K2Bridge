// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
// See LICENSE file in the project root for full license information.

namespace K2Bridge.Visitors
{
    using System.Globalization;
    using K2Bridge.Models.Request.Aggregations;
    using K2Bridge.Models.Response;

    /// <content>
    /// A visitor for the <see cref="RangeAggregation"/> element.
    /// </content>
    internal partial class ElasticSearchDSLVisitor : IVisitor
    {
        /// <inheritdoc/>
        public void Visit(DateRangeAggregation dateRangeAggregation)
        {
            Ensure.IsNotNull(dateRangeAggregation, nameof(RangeAggregation));
            EnsureClause.StringIsNotNullOrEmpty(dateRangeAggregation.Metric, nameof(RangeAggregation.Metric));
            EnsureClause.StringIsNotNullOrEmpty(dateRangeAggregation.Field, nameof(RangeAggregation.Field));

            // Start the union operator
            dateRangeAggregation.KustoQL += "union ";

            // Query expressions for each range
            // (_data | where foo >= make_datetime(2018, 02, 01) and foo < make_datetime(2018, 02, 02) | summarize ['3']=avg(baz), count() | extend ['2'] = strcat(make_datetime(2018, 02, 01), "-", make_datetime(2018, 02, 02))
            foreach (var range in dateRangeAggregation.Ranges)
            {
                dateRangeAggregation.KustoQL += $"(_data | {KustoQLOperators.Where} ";

                range.Field = dateRangeAggregation.Field;
                range.Accept(this);

                // Insert the range clause
                if (string.IsNullOrEmpty(range.KustoQL))
                {
                    // This is then "open" range, -infinity to +infinity
                    dateRangeAggregation.KustoQL += "true";
                }
                else
                {
                    dateRangeAggregation.KustoQL += range.KustoQL;
                }

                // Insert the KustoQL generated by the metrics aggregations
                // rangeAggregation.MetricsKustoQL contains the KustoQL generated by the metrics sub-aggregations (if any)
                // rangeAggregation.Metric is the default aggregation, always present, currently count()
                dateRangeAggregation.KustoQL += $" | {KustoQLOperators.Summarize} {dateRangeAggregation.SubAggregationsKustoQL}{dateRangeAggregation.Metric}";

                // Create the column with the range name using extend
                dateRangeAggregation.KustoQL += $" | {KustoQLOperators.Extend} ['{dateRangeAggregation.Key}'] = {range.BucketNameKustoQL}), ";
            }

            // Remove final comma and space
            dateRangeAggregation.KustoQL = dateRangeAggregation.KustoQL.TrimEnd(' ', ',');

            // Order rows by key
            // Re-order columns by ascending order
            // Make sure the aggregation column (with range names) is first
            dateRangeAggregation.KustoQL += $" | {KustoQLOperators.OrderBy} ['{dateRangeAggregation.Key}'] asc | {KustoQLOperators.ProjectReorder} ['{dateRangeAggregation.Key}'], * asc";
        }
    }
}
